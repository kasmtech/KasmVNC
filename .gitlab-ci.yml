image: docker
services:
  - docker:dind

variables:
  KASMVNC_COMMIT_ID: $CI_COMMIT_SHA
  GITLAB_SHARED_DIND_DIR: /builds/$CI_PROJECT_PATH/shared
  GIT_SUBMODULE_STRATEGY: normal
  GIT_FETCH_EXTRA_FLAGS: --tags --force
  # E.g. BUILD_JOBS: build_debian_buster,build_ubuntu_focal. This will include
  # arm builds, because build_debian_buster_arm matches build_debian_buster.
  # "BUILD_JOBS: none" won't build any build jobs, nor www.
  BUILD_JOBS: all
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

workflow:
  rules:
    # Disable tag builds.
    - if: $CI_COMMIT_TAG != $CI_COMMIT_REF_NAME && $CI_PIPELINE_SOURCE != "merge_request_event"

stages:
  - www
  - build
  - functional_test
  - run_test
  - test
  - upload

.prepare_build: &prepare_build
  - pwd
  - apk add bash
  - mkdir -p "$GITLAB_SHARED_DIND_DIR" && chmod 777 "$GITLAB_SHARED_DIND_DIR"
  - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD

.prepare_www: &prepare_www
  - tar -zxf output/www/kasm_www.tar.gz -C builder/

.prepare_artfacts: &prepare_artfacts
  - cp -r builder/build/* output/
  - rm output/*.tar.gz

default:
  tags:
    - oci-fixed-amd

functional_test:
  stage: functional_test
  image: debian:bookworm
  tags:
    - oci-fixed-amd
  before_script:
    - . .ci/upload.sh
  script:
    - prepare_to_run_functional_tests
    - ./functional-test
    - upload_report_to_s3
    - put_report_into_ci_pipeline
  dependencies:
    - build_amd64
  artifacts:
    paths:
      - kasmvnc-functional-tests/output/

build_www:
  stage: www
  allow_failure: false
  tags:
    - oci-fixed-amd
  before_script:
    - *prepare_build
  script:
    - webpacked_www=$PWD/builder/www
    - src_www=kasmweb
    - docker build -t kasmweb/www -f builder/dockerfile.www.build .
    - docker run --rm -v $PWD/builder/www:/build kasmweb/www:latest
    - mkdir -p output/www
    - cd builder
    - echo $PWD
    - ls -l
    - ls -l ../output
    - tar -zcvf ../output/www/kasm_www.tar.gz www
  only:
    variables:
      - $BUILD_JOBS !~ /^none$/
  artifacts:
    paths:
      - output/

build_amd64:
  stage: build
  allow_failure: true
  tags:
    - oci-fixed-amd
  before_script:
    - *prepare_build
    - *prepare_www
  after_script:
    - *prepare_artfacts
  script:
    - bash builder/build-package $DISTRO;
  only:
    variables:
      - $BUILD_JOBS == 'all' || $BUILD_JOBS =~ "$DISTRO"
  artifacts:
    paths:
      - output/
  parallel:
    matrix:
      - DISTRO: [ 'ubuntu focal', 'ubuntu jammy', 'ubuntu noble', 'debian bullseye', 'debian bookworm', 'kali kali-rolling', 'oracle 8', 'oracle 9', 'opensuse 15', 'fedora forty', 'fedora fortyone', 'alpine 318', 'alpine 319', 'alpine 320', 'alpine 321' ]

build_arm64:
  stage: build
  allow_failure: true
  tags:
    - oci-fixed-arm
  before_script:
    - *prepare_build
    - *prepare_www
  after_script:
    - *prepare_artfacts
  script:
    - bash builder/build-package $DISTRO;
  only:
    variables:
      - $BUILD_JOBS == 'all' || $BUILD_JOBS =~ "$DISTRO"
  artifacts:
    paths:
      - output/
  parallel:
    matrix:
      - DISTRO: [ 'ubuntu focal', 'ubuntu jammy', 'ubuntu noble', 'debian bullseye', 'debian bookworm', 'kali kali-rolling', 'oracle 8', 'oracle 9', 'opensuse 15', 'fedora forty', 'fedora fortyone', 'alpine 318', 'alpine 319', 'alpine 320', 'alpine 321' ]

run_test_amd64:
  stage: run_test
  tags:
    - oci-fixed-amd
  before_script:
    - *prepare_build
  script:
    - bash builder/test-barebones --run-test $DISTRO
  only:
    variables:
      - $BUILD_JOBS == 'all' || $BUILD_JOBS =~ "$DISTRO"
  dependencies:
    - build_amd64
  artifacts:
    reports:
      junit:
        - run_test/*.xml
  parallel:
    matrix:
      - DISTRO: [ 'ubuntu focal', 'ubuntu jammy', 'ubuntu noble', 'debian bullseye', 'debian bookworm', 'kali kali-rolling', 'oracle 8', 'oracle 9', 'opensuse 15', 'fedora forty', 'fedora fortyone', 'alpine 318', 'alpine 319', 'alpine 320', 'alpine 321' ]

run_test_arm64:
  stage: run_test
  tags:
    - oci-fixed-arm
  before_script:
    - *prepare_build
  script:
    - bash builder/test-barebones --run-test $DISTRO
  only:
    variables:
      - $BUILD_JOBS == 'all' || $BUILD_JOBS =~ "$DISTRO"
  dependencies:
    - build_arm64
  artifacts:
    reports:
      junit:
        - run_test/*.xml
  parallel:
    matrix:
      - DISTRO: [ 'ubuntu focal', 'ubuntu jammy', 'ubuntu noble', 'debian bullseye', 'debian bookworm', 'kali kali-rolling', 'oracle 8', 'oracle 9', 'opensuse 15', 'fedora forty', 'fedora fortyone', 'alpine 318', 'alpine 319', 'alpine 320', 'alpine 321' ]

spec_test:
  stage: test
  tags:
    - kasmvnc-x86
  before_script:
    - *prepare_build
  artifacts:
    reports:
      junit:
        - SelfBench.xml
        - Benchmark.xml
  script:
    - bash builder/test-vncserver


upload:
  stage: upload
  image: ubuntu:focal
  tags:
    - oci-fixed-amd
  artifacts:
    paths:
      - output/
  before_script:
    - . .ci/upload.sh
  script:
    - prepare_to_run_scripts_and_s3_uploads
    - S3_CRASHPAD_BUILD_DIRECTORY="kasmvnc/crashpad/${CI_COMMIT_SHA}"
    - for dbgsym_package in `find output/ -type f -name '*dbgsym*deb'`; do
        deb_package=$(find_deb_package "$dbgsym_package");
        xvnc_md5sum=$(fetch_xvnc_md5sum "$deb_package");
        upload_filename="${S3_CRASHPAD_BUILD_DIRECTORY}/${xvnc_md5sum}/kasmvncserver-dbgsym.deb";
        echo;
        echo "File to upload $upload_filename";
        upload_to_s3 "$dbgsym_package" "$upload_filename" "$S3_BUCKET";
        rm "$dbgsym_package";
      done
    - export S3_BUILD_DIRECTORY="kasmvnc/${CI_COMMIT_SHA}"
    - export RELEASE_VERSION=$(.ci/next_release_version "$CI_COMMIT_REF_NAME")
    - uploaded_files=()
    - for package in `find output/ -type f -name '*.deb' -or -name '*.rpm' -or -name '*.apk'`; do
        prepare_upload_filename "$package";
        upload_filename="${S3_BUILD_DIRECTORY}/$upload_filename";
        echo;
        echo "File to upload $upload_filename";
        upload_to_s3 "$package" "$upload_filename" "$S3_BUCKET";
        UPLOAD_NAME=$(basename $upload_filename | sed 's#kasmvncserver_##' | sed -r 's#_([0-9]{1,3}\.){2}[0-9]{1,2}_\S+?([a-f0-9]{6})##' | sed -r 's#\.(deb|rpm|tgz)##');
        curl --request POST --header "PRIVATE-TOKEN:${GITLAB_API_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/statuses/${CI_COMMIT_SHA}?state=success&name=${UPLOAD_NAME}&target_url=${S3_URL}";
        uploaded_files+=("$upload_filename");
      done
    - make_index_html "${uploaded_files[@]}" > output/index.html;

upload_build_preview:
  stage: upload
  needs: ["upload"]
  dependencies: ["upload"]
  image: ubuntu:focal
  tags:
    - oci-fixed-amd
  before_script:
    - . .ci/upload.sh
  resource_group: upload_build_preview
  only:
    variables:
      - $CI_COMMIT_BRANCH == 'master'
  script:
    - prepare_to_run_scripts_and_s3_uploads
    - preview_builds_dir=kasmvnc/preview-builds
    - upload_to_s3 "output/index.html" "$preview_builds_dir/index.html" "$S3_BUCKET"
    - curl --request POST --header "PRIVATE-TOKEN:${GITLAB_API_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/statuses/${CI_COMMIT_SHA}?state=success&name=index.html&target_url=${S3_URL}";
